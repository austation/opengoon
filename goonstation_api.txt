API Endpoint is in config

api call might look like http://api.austation.net/bans/check/?ckey=mcterra&date=blah&bypass=1&data_server=blah&auth=283vn4ht9458gv934nt9

outgoing params are based on "sort-of-GET"(tm), with there being a / between the path and the ?, which kinddda breaks things

API returns responses in JSON

api proc just returns 1 unless force is specified? from what I can tell, bypass is used when data is to be recieved. It's unset when data is pushed to the API.

okay, so if force is NOT specified, the API processes and then does a callback to the server Topic() later on to handle things.

response can also specify an error field to contain API errors. this error is handled in some places and not in others. goon code at work lol

todo: ban sync

notable files:
all of api_handler.dm
world.dm lines from 1362

API Usage and Exhaustive Endpoints:
antags: used for antag stats for players
	history:
		request:
			role = antagonist type, simple string
			mode = round mode
			players[0], players[1], ... = ckeys for arbitrary amount of players to fetch history for - if only one player given, [] syntax is ommitted
		returns:
			history = list of history for each player with following structure (in json as an example):
				"history": {
					"example_key (this would be a player's ckey)": {
						"selected": 10, - number of times selected for a given role in a given mode
						"seen": 20 - number of times seen in a given mode
					}
				}
		callback: no
		behaviour: returns information about antag history for a list of players, given role and round types.

	completeHistory:
		request:
			ckey = player ckey
		returns:
			history = list of player antag history (in json as an example):
				"history": {
					"changeling": {
						"selected": 10 - number of times selected for a role in given mode
						"seen": 20 - number of times seen in a given mode
						"percent": 50 - percentage of rounds chosen. why this isn't just calculated in the code I don't know.
					}
					// more modes/roles go here
				}
		callback: no
		behaviour: returns a full list of every role a player played in and the number and percentage of the times they were selected.

	records:
		request:
			role: role selected for, one of two valid options
			latejoin: 1 or 0 (boolean) if antag was latejoin. only used if role is given. assuming latejoins don't count as weighting, code reinforces this
			players[0][ckey] AND players[0][role], players[1][ckey] AND players[1][role], ... = ckeys for arbitrary amount of players to fetch history for, as well as roles - if only one player given, [] syntax is ommitted and only "players" is given
			assday: 1 if ass day on. not present otherwise. only given when multiple player ckeys are provided, not singular. don't count for weighting.
		returns: nothing
		callback: no
		behaviour: stores either a single player or multiple players to the database for antag rounds.

versions: byond version tracking for players, including user agent
	add:
		request:
			ckey = player ckey
			ua = player user agent
			byondMajor = byond version
			byondMinor = byond build
		returns: nothing
		callback: no
		behaviour: stores given information into database for use in player stats

gauntlet: some persistant data for critter gauntlet
	getPrevious:
		request:
			key = user key
		returns: nothing
		callback: yes - callback to /proc/query/GauntletMatches with data (json representation):
			{
				"keys": [
					"foo",
					"bar"
				],

				"foo": 10, // number is the number of matches found I guess
				"bar": 15
			}
		behaviour: returns data for ckeys about critter gauntlet. Is basically number of matches played. I really don't know how this API area is actually updated lol, maybe through the goonhub log or something?
				   actually you know what'd be real funny? if this actually incremented the match count... it is "getPrevious" after all... you know what? I'll implement that because it sounds like a good idea and hyper smart.

participation: just record rounds a player was in, only consists of the name and mode
	record:
		request:
			ckey = player key
			round_mode = current round type
		returns: nothing
		callback: no
		behaviour: records a player's participation in a round

	recordMultiple:
		request:
			ckeys[0], ckeys[1], ... = player ckeys
			round_mode = current round type
		returns: nothing
		callback: no
		behaviour: records round participation for multiple players at a time.

map-switcher: *apparently*, goon requires the chosen map to literally be chosen at compile time, so this is done by API. Guess I can edit the dme on the fly for this one...
	switch:
		request:
			cause: reason for map switch
			map: ID for the map we're switching to
			votedFor: 1 or 0, boolean for if the map switch was player triggered or not
		returns: nothing, bar defaults. I will note however that the expected response code is 201.
		callback: technically, yes, but not from the API itself. CI should call topic "mapSwitchDone". Not a focus rn, the API should just ignore this for now.
		behaviour: oh my god this is the worst, it literally tells CI to recompile the damn project with a different map, because there's no ondemand maploading, period

bans: handle all that sweet ban type stuff
	check:
		request:
			ckey = player ckey
			compID = player compID
			ip = player ip addr
			record = 1/0 - 1 = new combination of ckey/id/compid which the DB should be updated with, 0 = seen before no need to update
		returns:
			none = 1/0 - 1 means no bans exist
			exception = 1/0 - 1 means user exempted from bans NOTE: this and the above ONLY exist if they are true. otherwise, the result contains a list of each ban paired to an id
			alt structure:
				{
					1: {
						ckey = player ckey
						ip = player ip addr
						compID = player compID
						id = ban id. this id is also the key for the json object, but it's here too for easy access.
						previous = id of previous ban, if ban was for evasion. 0 if ban was admin applied
						chain = c-c-c-combo breaker! - how many times an evasion ban has been applied
						timestamp = byond realtime timestamp when ban is due to expire in minutes. 0 if ban is perma
						reason = reason for ban
						oakey = original banning admin key
						akey = current banning admin key, "Auto Banner" in the case of an evasion ban
						server = server banned from. may not be present if global ban.
					}
				}
		callback: no
		behaviour: returns data regarding a player's bans, note that it needs to check bans for the specific server. global bans should be returned always, but bans for other servers should be ignored.

	add:
		request:
			ckey = player ckey
			compID = player compID
			ip = player ip addr
			reason = ban reason
			oakey = original admin key
			akey = banning admin key
			timestamp = byond realtime expiry timestamp in minutes
			previous = id of previous ban, only set if ban is an evasion ban
			chain = number of evasion bans, zero by default
			server = only present if ban is server-specific, else not specified
		returns: nothing
		callback: no
		behaviour: adds a new ban to the database with specified information

	edit:
		request:
			id = ban id to edit
			ckey = player ckey for ban
			compID = player compID for ban
			ip = player ip for ban
			reason = ban reason
			akey = banning admin key
			timestamp = ban expiry timestamp in minutes from byond realtime
			server = server ban applies to. only present if ban is not global
		returns: nothing
		callback: no
		behaviour: edits the data for an existing ban

	delete:
		request:
			id = ban id to delete
			ckey = player ckey
			compID = player compID
			ip = player ip addr
			akey = admin responsible
		returns: nothing
		callback: no
		behaviour: deletes a ban. whether it's full deletion or setting a flag is not clear yet.

	updateLocal: pull down bans to update local storage -- leaving unimplemented for now
	updateRemote: push all the bans up to remote I guess -- leaving unimplemented for now
	parity: check if the remote and local dbs are synced -- sort of leaving unimplemented; always returns in sync response

playerInfo: handles player statistics
	get:
		request:
			ckey: player ckey
		returns:
			seen: total rounds connected
			participated: total rounds participated in
			byondMajor: byond version
			byondMinor: byond build
			platform: operating system I guess? extracted from user agent
			browser: browser in use, might be extracted from user agent
			browserVersion: browser version, as above
			browserMode: can be ommitted, probably as above
			last_ip: last used IP address
			last_compID: last used computer ID
		callback: no
		behaviour: takes a ckey and spits back a heap of information pulled from the DB

	getIPs:
		request:
			ckey: player ckey
		returns: (this returns a json array, rather than an object. formatted as such.):
			[
				{
					"last_seen": last seen IP address, always in the first block of the array apparently
					"ip": ip address in human readable form
					"times": number of times IP was seen
				},

				{
					"ip": ip address in human readable form
					"times": number of times IP was seen
				}
			]
		callback: no
		behaviour: takes a ckey and returns an array of every IP used and times connected.

	getCompIDs:
		request:
			ckey: player ckey
		returns: (this returns a json array, rather than an object. formatted as such.):
			[
				{
					"last_seen": last seen compID, always in the first block of the array apparently
					"compID": compID in human readable form
					"times": number of times compID was seen
				},

				{
					"compID": compID in human readable form
					"times": number of times compID was seen
				}
			]
		callback: no
		behaviour: takes a ckey and returns an array of every compID used and times connected.

numbers: some numberstation game mechanic - IMPLEMENTED!!!
	get:
		request: nothing
		response: nothing
		callback: yes, callback to /proc/lincolnshire_numbers with format:
			numbers = space separated string of 21 numbers from 0 to 99
		behaviour: this is pretty simple, just generate numbers

vpncheck: - IMPLEMENTED!!!
	request:
		ip = target ip address
		ckey = user ckey
	returns:
		whitelisted = 1/0, true is IP whitelisted from VPN checks
		response = JSON response from VPN checker service. Server used by goon is ipinfo.io, example from their website included:
			{
				"vpn": true,
				"proxy": false,
				"tor": false,
				"hosting": true,
				"message": "blah" // only present if there was an error, i.e. rate limited
			}
	callback: no
	behaviour: just queries a VPN check service for information about an IP, and also handles whitelisting.

vpncheck-whitelist:
	add:
		request:
			ckey = player ckey to whitelist
			akey = key of admin whitelisting
		returns: nothing
		callback: no
		behaviour: adds a ckey to the VPN whitelist

	remove:
		request:
			ckey = player ckey to remove from whitelist
			akey = key of admin removing from whitelist
		returns: nothing
		callback: no
		behaviour: removes a ckey from the VPN whitelist

playtimes: stores player playtimes
	record-multiple:
		request:
			ckeys[foo], ckeys[bar] = playtime for different ckeys in seconds
		returns: nothing
		callback: no
		behaviour: save player playtime information to DB, used for playerinfo stuff I think

jobbans: api endpoint to handle jobbanning - db done
	get:
		player:
			request:
				ckey = player ckey
			returns: an array of the jobs the player is banned from. this is mostly transparent to the API and is just a matter of parsing and storing. example array:
				[
					"Everything Except Assistant",
					"Captain",
					"Security Department"
				]
			callback: no
			behaviour: just gets list of jobbanned jobs for a player

	add:
		request:
			ckey = player ckey
			akey = banning admin key
			rank = rank to ban from
			applicable_server = server id to ban from. this gets checked when returning results from the get endpoint by checking server ID in the request
		returns: nothing
		callback: no
		behaviour: adds a player jobban to the DB

	del:
		request:
			ckey = player ckey
			rank = rank to remove ban from
		returns: nothing
		callback: no
		behaviour: deletes a jobban from the DB


callback: not really a request, but what the API sends in a topic. It has params too that will be important to understand
these callbacks are Topic() calls to the server that sent the request.
to make a callback, the server sending the topic needs to be IP whitelisted in the server config as the goonhubAPI server.
The topic then needs to include a type parm with the value of "hubCallback"
The following type params are also needed:
data: the json-encoded data to be passed to the proc
auth: md5 hash of the auth key
proc: a proc to call
datum: optional argument containing a reference to some object in the world to call the proc on
